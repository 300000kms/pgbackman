# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  #config.vm.box = "chef/centos-6.6"

  config.vm.define "pg-backup01" do |pgbackup1|
    pgbackup1.vm.box = "chef/centos-6.6"
    pgbackup1.vm.network "private_network", ip: "10.10.10.101"
    pgbackup1.vm.hostname = "pg-backup01.example.net"
    pgbackup1.vm.provision :shell, :path => "bootstrap.sh"

    pgbackup1.vm.provider "virtualbox" do |vb1|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb1.customize ["modifyvm", :id, "--memory", "512"]                             
    end
   end

   config.vm.define "pg-backup02" do |pgbackup2|
    pgbackup2.vm.box = "chef/debian-7.4"
    pgbackup2.vm.network "private_network", ip: "10.10.10.102"
    pgbackup2.vm.hostname = "pg-backup02.example.net"
    pgbackup2.vm.provision :shell, :path => "bootstrap_debian.sh"

    pgbackup2.vm.provider "virtualbox" do |vb2|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb2.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "pg-node01" do |pgnode1|
    pgnode1.vm.box = "chef/centos-6.6"
    pgnode1.vm.network "private_network", ip: "10.10.10.103"
    pgnode1.vm.hostname = "pg-node01.example.net"
    pgnode1.vm.provision :shell, :path => "bootstrap3.sh"

    pgnode1.vm.provider "virtualbox" do |vb3|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb3.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "pg-node02" do |pgnode2|
    pgnode2.vm.box = "chef/centos-6.6"
    pgnode2.vm.network "private_network", ip: "10.10.10.108"
    pgnode2.vm.hostname = "pg-node02.example.net"
    pgnode2.vm.provision :shell, :path => "bootstrap3.sh"

    pgnode2.vm.provider "virtualbox" do |vb3|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb3.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "pgbackmandb" do |pgbackmandb|
    pgbackmandb.vm.box = "chef/centos-6.6"
    pgbackmandb.vm.network "private_network", ip: "10.10.10.104"
    pgbackmandb.vm.hostname = "pgbackmandb.example.net"
    pgbackmandb.vm.provision :shell, :path => "bootstrap2.sh"

    pgbackmandb.vm.provider "virtualbox" do |vb4|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb4.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "centos6" do |centos6|
    centos6.vm.box = "chef/centos-6.6"
    centos6.vm.network "private_network", ip: "10.10.10.105"
    centos6.vm.hostname = "centos6.example.net"
    centos6.vm.provision :shell, :path => "bootstrap_centos.sh"

    centos6.vm.provider "virtualbox" do |vb5|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb5.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "debian7" do |debian7|
    debian7.vm.box = "chef/debian-7.4"
    debian7.vm.network "private_network", ip: "10.10.10.106"
    debian7.vm.hostname = "debian7.example.net"
    debian7.vm.provision :shell, :path => "bootstrap_debian.sh"

    debian7.vm.provider "virtualbox" do |vb6|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb6.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "ubuntu14" do |ubuntu14|
    ubuntu14.vm.box = "chef/ubuntu-14.04"
    ubuntu14.vm.network "private_network", ip: "10.10.10.107"
    ubuntu14.vm.hostname = "ubuntu14.example.net"
    ubuntu14.vm.provision :shell, :path => "bootstrap_debian.sh"

    ubuntu14.vm.provider "virtualbox" do |vb7|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb7.customize ["modifyvm", :id, "--memory", "512"]
    end
   end

   config.vm.define "centos7" do |centos7|
    centos7.vm.box = "centos7"
    centos7.vm.network "private_network", ip: "10.10.10.108"
    centos7.vm.hostname = "centos7.example.net"
    centos7.vm.provision :shell, :path => "bootstrap_centos.sh"

    centos7.vm.provider "virtualbox" do |vb8|
     # Use VBoxManage to customize the VM. For example to change memory:  
     vb8.customize ["modifyvm", :id, "--memory", "1024"]
    end
   end


  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "10.10.10.100"


  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "512"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file chef/centos-6.6.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
