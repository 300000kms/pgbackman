#!/usr/bin/env python
#
# Copyright (c) 2013 Rafael Martinez Guerrero (PostgreSQL-es)
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# This file is part of PgBck
# https://github.com/rafaelma/pgbck
#
# PgBck is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PgBck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PgBck.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import time
import signal
import argparse

sys.path.append('/home/rafael/Devel/GIT/pgbackman')

from pgbackman.logs import *
from pgbackman.database import * 
from pgbackman.config import *



# ############################################
# Function 
# ############################################
    
def pg_dump():
    '''pg_dump function'''

# ############################################
# Function 
# ############################################
    
def pg_dump_users():
    '''pg_dump_users function'''


# ############################################
# Function 
# ############################################
    
def pg_dump_database_config():
    '''pg_dump_database_config function'''



# ############################################
# Function handler
# ############################################
    
def get_pgsql_node_dsn():
    '''Get the DSN values for a pgsql_node'''

    pgsql_node_id = db.get_pgsql_node_id(pgsql_node)
    dsn_value = db.get_pgsql_node_dsn(pgsql_node_id)

    return dsn_value
    

# ############################################
# Function handler
# ############################################
    
def signal_handler(signum, frame):
    logs.logger.info('**** pgbackman_dump stopped. ****')
    sys.exit(0)


# ############################################
# Function 
# ############################################
    
def main():
    '''Main function'''



    logs.logger.info('**** pgbackman_dump started. ****')

    print get_pgsql_node_dsn()
    




# ############################################
# 
# ############################################

if __name__ == '__main__':

    logs = logs("pgbackman_dump")
    signal.signal(signal.SIGINT,signal_handler)
    signal.signal(signal.SIGTERM,signal_handler)

    parser = argparse.ArgumentParser(prog=sys.argv[0])
    parser.add_argument('-H', metavar='PGSQL-NODE', required=True, help='PgSQL node FQDN', dest='pgsql_node')
    parser.add_argument('-j', metavar='JOBID', required=True, help='Backup job ID', dest='backup_job_id')
    parser.add_argument('-d', metavar='DBNAME', required=True, help='Database name', dest='dbname')
    parser.add_argument('-c', metavar='[FULL|SCHEMA|DATA]', choices=['full', 'schema', 'data'], required=True, help='Backup code', dest='backup_code')
    parser.add_argument('-e', metavar='[FALSE|TRUE]', default=False, required=True, help='Activate encryption', dest='encryption')
    
    args = parser.parse_args()    
    print args
    pgsql_node = args.pgsql_node
    

    conf = configuration()
    dsn = conf.dsn
    
    db = pgbackman_db(dsn,logs)

    main()
