#!/usr/bin/env python
#
# Copyright (c) 2013 Rafael Martinez Guerrero (PostgreSQL-es)
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# This file is part of Pgbackman
# https://github.com/rafaelma/pgbackman
#
# PgBackMan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PgBackMan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pgbackman.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import time
import socket

sys.path.append('/home/rafael/Devel/GIT/pgbackman')

from pgbackman.cli import * 
from pgbackman.database import * 
from pgbackman.config import *
 
__version__ = "1.0.0"


class listen_channels():

    # ############################################
    # Constructor
    # ############################################
    
    def __init__(self,db,backup_server_id):
        """ The Constructor."""
        
        self.listen_list = []
        self.db = db
        self.backup_server_id = backup_server_id


    # ############################################
    # Method
    # ############################################
    
    def add_to_listen_channels(self):
        """Define all channels where we are goint to listen for notification"""
        
        self.listen_list = []
        
        for channel in self.db.get_listen_channel_names(self.backup_server_id): 
            self.listen_list.append(channel)
            self.db.add_listen(channel)
            
            print self.listen_list # debug

            
    # ############################################
    # Method
    # ############################################

    def delete_from_listen_channels(self):
        """Unlisten a channel"""
        
        new_listen_list = []
        delete_listen_list = []
        
        for channel in self.db.get_listen_channel_names(self.backup_server_id): 
            new_listen_list.append(channel)

            delete_listen_list = set(self.listen_list)-set(new_listen_list)
            
        for channel in delete_listen_list:
            self.db.delete_listen(channel)
                


# ############################################
# Method
# ############################################

def check_directories():
    """Check the directories needed"""

# ############################################
# Method
# ############################################

def generate_crontab_file(pgsql_node_id):
    """Check the directories needed"""

    print 'Generating crontab file for: ' + str(pgsql_node_id)


# ############################################
# Method
# ############################################

def get_next_crontab_id_to_generate(db,backup_server_id):
    """Get all the PgSQL node IDs some need to get a new crontab file installed"""
    
    node_id = db.get_next_crontab_id_to_generate(backup_server_id)

    while node_id != None:
        generate_crontab_file(node_id)
        node_id = db.get_next_crontab_id_to_generate(backup_server_id)



# ############################################
# Method
# ############################################

def main():
    
    conf = configuration()
    dsn = conf.dsn

    db = pgbackman_db(dsn)
    db.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

    print conf.backup_server #debug
    print socket.getfqdn() #debug
    print conf.dsn # debug

    if conf.backup_server != '':
        backup_server_id = db.get_backup_server_id(conf.backup_server)
    else:
        backup_server_id = db.get_backup_server_id(socket.getfqdn())
        
    if backup_server_id == False:
        sys.exit()     

    ch = listen_channels(db,backup_server_id)
    ch.add_to_listen_channels()
    
    # We check if there are some crontab files to generate when
    # we start pgbackman2cron. This is nesessary just in case 
    # pgbackman2cron has been down and missed some NOTIFYs 
    # from the central database.

    get_next_crontab_id_to_generate(db,backup_server_id)
    
    print ch.listen_list # debug
    print conf.channels_check_interval # debug
  
    while True:
        channels = []
        db.wait_select()
        
        while db.conn.notifies:
            channel = db.conn.notifies.pop().channel
            channels.append(channel)
    
        for channel in set(channels):
            if channel == 'channel_pgsql_nodes_updated':
                ch.delete_from_listen_channels()
                ch.add_to_listen_channels()
            else:
                get_next_crontab_id_to_generate(db,backup_server_id)
        print 'LOOP'        
        # We check and receive all new notifications every 60 seconds.
        time.sleep(conf.channels_check_interval)
            
    db.pg_close()
            

if __name__ == '__main__':
    
    main()


