#!/usr/bin/env python
#
# Copyright (c) 2013 Rafael Martinez Guerrero (PostgreSQL-es)
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# This file is part of Pgbackman
# https://github.com/rafaelma/pgbackman
#
# PgBackMan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PgBackMan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pgbackman.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import time
import socket
import signal

sys.path.append('/home/rafael/Devel/GIT/pgbackman')

from pgbackman.logs import *
from pgbackman.database import *
from pgbackman.database_notify import *
from pgbackman.config import *
 
__version__ = "1.0.0"

listen_list = []

# ############################################
# Function
# ############################################

def add_to_listen_channels(db,backup_server_id):
    """Listen to all active channels"""
    
    global listen_list
    
    old_listen_list = listen_list
    new_listen_list = []
    listen_list = []
        
    for channel in db.get_listen_channel_names(backup_server_id): 
        listen_list.append(channel)

    new_listen_list = set(listen_list) - set(old_listen_list)    

    for channel in new_listen_list:
        db.add_listen(channel)
        
        logs.logger.info('Listening to channel: %s',channel)

            
# ############################################
# Function
# ############################################

def delete_from_listen_channels(db,backup_server_id):
    """Unlisten a channel"""
    
    new_listen_list = []
    delete_listen_list = []

    for channel in db.get_listen_channel_names(backup_server_id): 
        new_listen_list.append(channel)
        
        delete_listen_list = set(listen_list)-set(new_listen_list)
        
    for channel in delete_listen_list:
        db.delete_listen(channel)
        
        logs.logger.info('Unlistening to channel: %s',channel)


# ############################################
# Function
# ############################################

def generate_crontab_backup_jobs(db,backup_server_id,pgsql_node_id):
    """Generate a crontab file for a PgSQL node"""

    crontab_file = db.get_pgsql_node_parameter(pgsql_node_id,'pg_node_cron_file')

    if os.path.exists(os.path.dirname(crontab_file)):
        
        try:
            file = open(crontab_file,'w',1)
                       
            if file:
                data = db.generate_crontab_backup_jobs(backup_server_id,pgsql_node_id)
                file.write(data)
                file.close()

                logs.logger.info('Crontab file: %s created/updated',crontab_file)
        except IOError as e:
            
            # If we cannot create the crontab file, we have to update
            # the job_queue in the database so we don't loose this update.
            
            db.update_job_queue(backup_server_id,pgsql_node_id)
            logs.logger.error('I/O error when creating/updating a crontab file: %s',e)


# ############################################
# Function
# ############################################
                         
def generate_all_crontab_jobs(db,backup_server_id):
    """Get all the PgSQL node IDs that need to get a new crontab file installed"""
    
    pgsql_node_id = db.get_next_crontab_id_to_generate(backup_server_id)
    
    while pgsql_node_id != None:
        generate_crontab_backup_jobs(db,backup_server_id,pgsql_node_id)
        pgsql_node_id = db.get_next_crontab_id_to_generate(backup_server_id)
 
    logs.logger.info('All crontab jobs in queue processed')

# ############################################
# Function
# ############################################
  
def check_database_connection(db):
    '''Check if we can connect to the database server and the pgbackman database'''

    try:
        db.pg_connect()
        return True
    except Exception as e:    
        return False
        

# ############################################
# Function
# ############################################

def main():
    global listen_list

    conf = configuration()
    dsn = conf.dsn

    logs.logger.debug('Backup server ID from config file: %s',conf.backup_server)
    logs.logger.debug('Backup server FQDN: %s',socket.getfqdn())
    logs.logger.debug('DSN: %s',conf.dsn)
    logs.logger.debug('Channels check interval: %s',conf.channels_check_interval)

    db = pgbackman_db(dsn,logs,'pgbackman2cron')

    #
    # We check before starting if the database is available. 
    # If it is not available we will wait conf.pg_connect_retry_interval 
    # and try again 

    check_db = check_database_connection(db)

    while not check_db:
        logs.logger.critical('The pgbackman database is not available. Waiting %s seconds before trying again',conf.pg_connect_retry_interval)
        
        time.sleep(conf.pg_connect_retry_interval)
        check_db = check_database_connection(db)
        
    logs.logger.debug('Database server is up and running and pgbackman database is available')
    db_notify = pgbackman_db_notify(dsn,logs,'pgbackman_notify')
    
    if conf.backup_server != '':
        backup_server_id = db.get_backup_server_id(conf.backup_server)
        
        if backup_server_id == False:
            logs.logger.critical('Backup server %s does not exist in pgbackman. Stopping pgbackman2cron.',conf.backup_server)
            logs.logger.info('**** PgBackMan2cron stopped. ****')
            sys.exit()     
        else:
            logs.logger.info('Backup server: %s up and running',conf.backup_server)
    else:
        backup_server_id = db.get_backup_server_id(socket.getfqdn())

        if backup_server_id == False:
            logs.logger.critical('Backup server %s does not exist in pgbackman. Stopping pgbackman2cron.',socket.getfqdn())
            logs.logger.info('**** PgBackMan2cron stopped. ****')
            sys.exit()     
        else:
            logs.logger.info('Backup server: %s exists in pgbackman and it is running',socket.getfqdn())

    add_to_listen_channels(db_notify,backup_server_id)

    # We check if there are some crontab files to generate when
    # we start pgbackman2cron. This is nesessary just in case 
    # pgbackman2cron has been down and missed some NOTIFYs 
    # from the central database.

    generate_all_crontab_jobs(db,backup_server_id)
 

    #
    # Main loop waiting for notifications
    #
    while True:
        channels = []        

        try:
            db_notify.conn.poll()

            while db_notify.conn.notifies:
                channel = db_notify.conn.notifies.pop().channel
                channels.append(channel)

            for channel in set(channels):
                if channel == 'channel_pgsql_nodes_updated':
                    delete_from_listen_channels(db_notify,backup_server_id)
                    add_to_listen_channels(db_notify,backup_server_id)
                else:
                    pgsql_node_id = db.get_next_crontab_id_to_generate(backup_server_id)
                    generate_crontab_backup_jobs(db,backup_server_id,pgsql_node_id)

            # We check and receive all new notifications after waiting conf.channels_check_interval.
            time.sleep(conf.channels_check_interval)
            print 'main LOOP' # debug

        except psycopg2.OperationalError as e:

            #
            # If we lose the connection to the database, we will wait conf.pg_connect_retry_interval
            # before trying to connect again. When the database is available again we will reset
            # all the listen channels and check if there are some crontab jobs in queue to be processed
            #

            logs.logger.critical('Operational error: %s',e)

            check_db = check_database_connection(db)
            
            while not check_db:
                logs.logger.critical('We have lost the connection to the database. Waiting %s seconds before trying again',conf.pg_connect_retry_interval)
                
                time.sleep(conf.pg_connect_retry_interval)
                check_db = check_database_connection(db)

            db_notify = None
            db_notify = pgbackman_db_notify(dsn,logs,'pgbackman_notify')
            
            listen_list = []

            add_to_listen_channels(db_notify,backup_server_id)
            generate_all_crontab_jobs(db,backup_server_id)
    
    db_notify.pg_close()
    db.pg_close()
        
# ############################################
# Function handler
# ############################################
    
def signal_handler(signum, frame):
    logs.logger.info('**** PgBackMan2cron stopped. ****')
    sys.exit(0)



# ############################################
# 
# ############################################

if __name__ == '__main__':

    logs = logs("pgbackman2cron")
    logs.logger.info('**** PgBackMan2cron started. ****')

    signal.signal(signal.SIGINT,signal_handler)
    signal.signal(signal.SIGTERM,signal_handler)

    main()


