#!/usr/bin/env python
#
# Copyright (c) 2013 Rafael Martinez Guerrero (PostgreSQL-es)
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# This file is part of Pgbackman
# https://github.com/rafaelma/pgbackman
#
# PgBackMan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PgBackMan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pgbackman.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import time
import socket

sys.path.append('/home/rafael/Devel/GIT/pgbackman')

from pgbackman.cli import * 
from pgbackman.database import * 

__version__ = "1.0.0"


# ############################################
# Method
# ############################################

def check_directories():
    """Check the directories needed"""


# ############################################
# Method
# ############################################

def generate_crontab_file(filename):
    """Generate the crontab file for a PgSQL node"""


# ############################################
# Method
# ############################################

def add_to_listen_channels(backup_server_id):
    """Define all channels where we are goint to listen for notification"""

    global listen_list
    listen_list = []

    for channel in db.get_listen_channel_names(backup_server_id): 
        listen_list.append(channel)
        db.add_listen(channel)

    print listen_list # debug

# ############################################
# Method
# ############################################

def delete_from_listen_channels(backup_server_id):
    """Unlisten a channel"""

    new_listen_list = []
    delete_listen_list = []

    for channel in db.get_listen_channel_names(backup_server_id): 
        new_listen_list.append(channel)
        
    delete_listen_list = set(listen_list)-set(new_listen_list)

    for channel in delete_listen_list:
        db.delete_listen(channel)


# ############################################
# Method
# ############################################

def get_backup_server_id(backup_server_fqdn):
    """Get the server ID for this backup server"""

    return db.get_backup_server_id(backup_server_fqdn)


# ############################################
# Method
# ############################################

def main():

    db.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

    print socket.getfqdn()
    add_to_listen_channels(get_backup_server_id(socket.getfqdn()))
    print listen_list # debug
  
    while True:
        channels = []
        db.wait_select()
        
        while db.conn.notifies:
            channel = db.conn.notifies.pop().channel
            channels.append(channel)
    
        for channel in set(channels):
            if channel == 'channel_pgsql_nodes_updated':
                delete_from_listen_channels(get_backup_server_id(socket.getfqdn()))
                add_to_listen_channels(get_backup_server_id(socket.getfqdn()))
            else:
                print channel
                
        # We check and receive all new notifications every 60 seconds.
        time.sleep(60)
            
    db.pg_close()
            

if __name__ == '__main__':

    listen_list = []

    dsn = "dbname='pgbackman' user='rafael'"
    db = pgbackman_db(dsn)
    
    main()


